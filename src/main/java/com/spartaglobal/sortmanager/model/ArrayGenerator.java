package com.spartaglobal.sortmanager.model;

import com.spartaglobal.sortmanager.SortManagerMain;
import com.spartaglobal.sortmanager.view.DisplayManager;

import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

public class ArrayGenerator {
    private int[] unsortedArray;

    /**
     * Generates an array of given size populated with random numbers within given range.
     *
     * @param size desired size of the array
     * @param bounds desired range of the numbers in the array
     */
    public void generateRandomArray(int size, int bounds){
        SortManagerMain.logger.debug("size= " + size);
        SortManagerMain.logger.debug("bounds= " + bounds);
        Random r = new Random();
        int[] array = new int[size];
        for(int i = 0; i < array.length; i++){
            array[i] = r.nextInt(-bounds, bounds+1);
        }
        unsortedArray = array;
        SortManagerMain.logger.debug("unsortedArray= " + new DisplayManager().displayArray(unsortedArray));
    }

    /**
     * Returns the unsorted array generated by one of the methods in this class.
     *
     * @return unsorted array
     */
    public int[] getUnsortedArray() {
        return unsortedArray;
    }

    /**
     * Generates a custom array of given size populated with given numbers.
     *
     * @param size desired size of the array
     */
    public void generateCustomArray(int size){
        SortManagerMain.logger.debug("size= " + size);
        Scanner sc = new Scanner(System.in);
        int[] createdArray = new int[size];
        for(int i = 0; i < createdArray.length; i++){
            System.out.println("------------------------------------------\n"
                    + "Enter a value: ");
            while(!sc.hasNextInt()){
                SortManagerMain.logger.warn("Incorrect value entered!");
                System.out.println("Incorrect number! Enter a number: ");
                sc.next();
            }
            createdArray[i] = sc.nextInt();
        }
        unsortedArray = createdArray;
        SortManagerMain.logger.debug("unsortedArray= " + new DisplayManager().displayArray(unsortedArray));
    }

    public void generateArray(String desiredArrayType){
        DisplayManager view = new DisplayManager();
        if(desiredArrayType.equals("random")){
            int arraySize = view.getDesiredArraySize();
            SortManagerMain.logger.debug("arraySize= " + arraySize);
            int arrayBounds = view.getDesiredArrayBounds();
            SortManagerMain.logger.debug("arrayBounds= " + arrayBounds);

            generateRandomArray(arraySize, arrayBounds);
            SortManagerMain.logger.info("Unsorted array= " + view.displayArray(getUnsortedArray()));
        }
        else{
            int arraySize = view.getDesiredArraySize();
            SortManagerMain.logger.debug("arraySize= " + arraySize);
            generateCustomArray(arraySize);
            SortManagerMain.logger.info("Unsorted array= " + view.displayArray(getUnsortedArray()));
        }
    }
}
